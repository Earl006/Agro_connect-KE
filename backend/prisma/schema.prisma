generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  phoneNumber          String
  password             String
  firstName            String
  lastName             String
  avatarUrl            String    @default("https://static.vecteezy.com/system/resources/previews/005/545/335/non_2x/user-sign-icon-person-symbol-human-avatar-isolated-on-white-backogrund-vector.jpg")
  role                 String    @default("BUYER")
  farmerRequestStatus  FarmerRequestStatus?   @default(NOT_REQUESTED)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  resetToken           String?
  resetTokenExpiry     DateTime?
  orders             Order[]
  products        Produce[]   @relation("FARMER")
  payments        Payment[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products    Produce[]
}

model Produce {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Decimal   @db.Decimal(10,2)
  quantity    Int       @default(0)
  unit        String    // e.g., "kg", "pieces"
  date        DateTime
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String
  imageUrl    String
  status      ProduceStatus @default(AVAILABLE)
  orderItems  OrderItem[]
  category    Category  @relation(fields: [categoryId], references: [id])
  farmerId    String
  farmer      User      @relation("FARMER", fields: [farmerId], references: [id], onUpdate: NoAction)
}
model Order {
  id                String          @id @default(uuid())
  userId            String
  totalPrice        Decimal         @db.Decimal(10,2)
  status            OrderStatus          @default(CONFIRMED)
  paymentStatus     PaymentStatus   @default(PENDING)
  paymentMethod     String          @default("MPESA")
  verificationCode  String?
  paymentId         String? 
  verified          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id], onUpdate: Cascade)
  orderItems        OrderItem[]
  payment           Payment?
}

model OrderItem {
  id                String          @id @default(uuid())
  orderId           String
  produceId         String
  quantity          Int
  price             Decimal         @db.Decimal(10,2)
  order             Order           @relation(fields: [orderId], references: [id], onUpdate: Cascade)
  produce           Produce         @relation(fields: [produceId], references: [id], onUpdate: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  orderId       String?       @unique
  amount        Decimal       @db.Decimal(10,2)
  status        PaymentStatus @default(PENDING)
  errorMessage  String?
  invoiceId     String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  order         Order?        @relation(fields: [orderId], references: [id])
}

enum UserRole {
  BUYER
  FARMER
  ADMIN
}

enum FarmerRequestStatus {
  NOT_REQUESTED
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProduceStatus {
  AVAILABLE
  OUT_OF_STOCK
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}